// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios18.2 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name distribution
import CryptoKit
import Foundation
import Security
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_exported import distribution
public struct BaseWorkspace : Swift.Codable {
  public let organizationId: Swift.String
  public let brandId: Swift.String
  public let workspaceId: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BasePage : Swift.Codable {
  public var _id: Swift.String
  public var name: Swift.String
  public var version: Swift.Int
  public var content: distribution.AnyCodable
  public var variantId: Swift.String?
  public var isVariant: Swift.Bool?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BaseVariant : Swift.Codable {
  public var _id: Swift.String?
  public var name: Swift.String?
  public var version: Swift.Int?
  public var content: distribution.AnyCodable?
  public var pageId: Swift.String?
  public var distributionPercentage: Swift.Double?
  public var variantId: Swift.String?
  public var isVariant: Swift.Bool?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BaseSettingsValue : Swift.Codable {
  public var id: Swift.String?
  public var name: Swift.String?
  public var description: Swift.String?
  public var required: Swift.Bool?
  public var type: Swift.String?
  public var value: distribution.AnyCodable?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BaseSetting : Swift.Codable {
  public var _id: Swift.String?
  public var key: Swift.String?
  public var value: [distribution.BaseSettingsValue]?
  public var isEnabled: Swift.Bool?
  public var description: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BaseSecrets : Swift.Codable {
  public var _id: Swift.String?
  public var secretKeyId: Swift.String?
  public var secretKeyVersion: Swift.Int?
  public var value: Swift.String
  public var name: Swift.String?
  public var description: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BaseContent : Swift.Codable {
  public var pages: [distribution.BasePage]?
  public var variants: [distribution.BaseVariant]?
  public var settings: [distribution.BaseSetting]
  public var secrets: [distribution.BaseSecrets]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Manifest : Swift.Codable {
  public let _id: Swift.String
  public let organizationId: Swift.String
  public let brandId: Swift.String
  public let workspaceId: Swift.String
  public var hash: Swift.String
  public var content: distribution.BaseContent
  public var segmentId: Swift.String?
  public let creationTimestamp: Swift.String
  public let lastModifiedTimestamp: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ClientSegment : Swift.Codable {
  public let segmentId: Swift.String
  public let priority: Swift.Int
  public let name: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@frozen public struct AnyCodable : Swift.Codable {
  public let value: Any
  public init<T>(_ value: T?)
}
extension distribution.AnyCodable : distribution._AnyEncodable, distribution._AnyDecodable {
}
extension distribution.AnyCodable : Swift.Equatable {
  public static func == (lhs: distribution.AnyCodable, rhs: distribution.AnyCodable) -> Swift.Bool
}
extension distribution.AnyCodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension distribution.AnyCodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension distribution.AnyCodable : Swift.ExpressibleByNilLiteral {
}
extension distribution.AnyCodable : Swift.ExpressibleByBooleanLiteral {
  public typealias BooleanLiteralType = Swift.Bool
}
extension distribution.AnyCodable : Swift.ExpressibleByIntegerLiteral {
  public typealias IntegerLiteralType = Swift.Int
}
extension distribution.AnyCodable : Swift.ExpressibleByFloatLiteral {
  public typealias FloatLiteralType = Swift.Double
}
extension distribution.AnyCodable : Swift.ExpressibleByStringLiteral {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension distribution.AnyCodable : Swift.ExpressibleByStringInterpolation {
  public typealias StringInterpolation = Swift.DefaultStringInterpolation
}
extension distribution.AnyCodable : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = Any
}
extension distribution.AnyCodable : Swift.ExpressibleByDictionaryLiteral {
  public typealias Key = Swift.AnyHashable
  public typealias Value = Any
}
extension distribution.AnyCodable : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@frozen public struct AnyDecodable : Swift.Decodable {
  public let value: Any
  public init<T>(_ value: T?)
}
@usableFromInline
internal protocol _AnyDecodable {
  var value: Any { get }
  init<T>(_ value: T?)
}
extension distribution.AnyDecodable : distribution._AnyDecodable {
}
extension distribution._AnyDecodable {
  public init(from decoder: any Swift.Decoder) throws
}
extension distribution.AnyDecodable : Swift.Equatable {
  public static func == (lhs: distribution.AnyDecodable, rhs: distribution.AnyDecodable) -> Swift.Bool
}
extension distribution.AnyDecodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension distribution.AnyDecodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension distribution.AnyDecodable : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@frozen public struct AnyEncodable : Swift.Encodable {
  public let value: Any
  public init<T>(_ value: T?)
}
@usableFromInline
internal protocol _AnyEncodable {
  var value: Any { get }
  init<T>(_ value: T?)
}
extension distribution.AnyEncodable : distribution._AnyEncodable {
}
extension distribution._AnyEncodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
extension distribution.AnyEncodable : Swift.Equatable {
  public static func == (lhs: distribution.AnyEncodable, rhs: distribution.AnyEncodable) -> Swift.Bool
}
extension distribution.AnyEncodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension distribution.AnyEncodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension distribution.AnyEncodable : Swift.ExpressibleByNilLiteral {
}
extension distribution.AnyEncodable : Swift.ExpressibleByBooleanLiteral {
  public typealias BooleanLiteralType = Swift.Bool
}
extension distribution.AnyEncodable : Swift.ExpressibleByIntegerLiteral {
  public typealias IntegerLiteralType = Swift.Int
}
extension distribution.AnyEncodable : Swift.ExpressibleByFloatLiteral {
  public typealias FloatLiteralType = Swift.Double
}
extension distribution.AnyEncodable : Swift.ExpressibleByStringLiteral {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension distribution.AnyEncodable : Swift.ExpressibleByStringInterpolation {
  public typealias StringInterpolation = Swift.DefaultStringInterpolation
}
extension distribution.AnyEncodable : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = Any
}
extension distribution.AnyEncodable : Swift.ExpressibleByDictionaryLiteral {
  public typealias Key = Swift.AnyHashable
  public typealias Value = Any
}
extension distribution._AnyEncodable {
  public init(nilLiteral _: ())
  public init(booleanLiteral value: Swift.Bool)
  public init(integerLiteral value: Swift.Int)
  public init(floatLiteral value: Swift.Double)
  public init(extendedGraphemeClusterLiteral value: Swift.String)
  public init(stringLiteral value: Swift.String)
  public init(arrayLiteral elements: Any...)
  public init(dictionaryLiteral elements: (Swift.AnyHashable, Any)...)
}
extension distribution.AnyEncodable : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct PrivateKeyParams : Swift.Codable {
  public let privateKey: Swift.String
  public let version: Swift.Int
  public init(privateKey: Swift.String, version: Swift.Int)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DistributionParams {
  public let apiKey: Swift.String
  public let workspaceId: Swift.String
  public let baseURL: Swift.String?
  public let timeout: Foundation.TimeInterval?
  public let privateKeys: [distribution.PrivateKeyParams]?
  public let debug: Swift.Bool?
  public init(apiKey: Swift.String, workspaceId: Swift.String, privateKeys: [distribution.PrivateKeyParams]? = nil, baseURL: Swift.String? = nil, timeout: Foundation.TimeInterval? = nil, debug: Swift.Bool? = nil)
}
public enum ClientType : Swift.String, Swift.Sendable {
  case CLIENT_TYPE_USER
  case CLIENT_TYPE_DEVICE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct MalibleConstant {
}
final public class MalibleDistribution {
  public init(params: distribution.DistributionParams)
  final public func getManifest(clientId: Swift.String?) async throws -> distribution.Manifest
  final public func getPages(clientId: Swift.String?) async throws -> [distribution.BasePage]
  final public func getPage(pageId: Swift.String, clientId: Swift.String?) async throws -> distribution.BasePage?
  final public func getSecrets(clientId: Swift.String?) async throws -> [distribution.BaseSecrets]
  final public func getClientSegments(clientId: Swift.String) async throws -> [distribution.ClientSegment]
  final public func getClientAttribute(clientId: Swift.String) async throws -> [Swift.String : distribution.AnyCodable]
  @objc deinit
}
extension distribution.ClientType : Swift.Equatable {}
extension distribution.ClientType : Swift.Hashable {}
extension distribution.ClientType : Swift.RawRepresentable {}
